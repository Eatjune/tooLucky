[1,0,0,[["cc.EffectAsset",["_name","shaders","techniques"],0]],[[0,0,1,2,4]],[[0,"outline",[{"hash":4294279472,"record":null,"name":"outline|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_color;\nuniform OutlineFrag {\n  float lineWidth;\n};\nuniform OutlineFrag2 {\n  vec4 lineColor;\n};\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nvoid main () {\n   vec4 accum = vec4(0.0);\n   vec4 normal = vec4(0.0);\n   float u_radius = 0.001*lineWidth;\n   vec3 u_outlineColor = vec3(lineColor.r, lineColor.g, lineColor.b);\n   normal = texture2D(texture, v_uv0);\n   accum += texture2D(texture, vec2(v_uv0.x - u_radius, v_uv0.y - u_radius));\n   accum += texture2D(texture, vec2(v_uv0.x + u_radius, v_uv0.y - u_radius));\n   accum += texture2D(texture, vec2(v_uv0.x + u_radius, v_uv0.y + u_radius));\n   accum += texture2D(texture, vec2(v_uv0.x - u_radius, v_uv0.y + u_radius));\n   accum.rgb = u_outlineColor * accum.a;\n   normal = (accum * (1.0 - normal.a)) + (normal * normal.a);\n   normal *= v_color;\n   gl_FragColor = normal;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\nuniform float lineWidth;\nuniform vec4 lineColor;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nvoid main () {\n   vec4 accum = vec4(0.0);\n   vec4 normal = vec4(0.0);\n   float u_radius = 0.001*lineWidth;\n   vec3 u_outlineColor = vec3(lineColor.r, lineColor.g, lineColor.b);\n   normal = texture2D(texture, v_uv0);\n   accum += texture2D(texture, vec2(v_uv0.x - u_radius, v_uv0.y - u_radius));\n   accum += texture2D(texture, vec2(v_uv0.x + u_radius, v_uv0.y - u_radius));\n   accum += texture2D(texture, vec2(v_uv0.x + u_radius, v_uv0.y + u_radius));\n   accum += texture2D(texture, vec2(v_uv0.x - u_radius, v_uv0.y + u_radius));\n   accum.rgb = u_outlineColor * accum.a;\n   normal = (accum * (1.0 - normal.a)) + (normal * normal.a);\n   normal *= v_color;\n   gl_FragColor = normal;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"OutlineFrag","binding":1,"members":[{"name":"lineWidth","type":13,"count":1}],"defines":[]},{"name":"OutlineFrag2","binding":2,"members":[{"name":"lineColor","type":16,"count":1}],"defines":[]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"outline|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]},"lineWidth":{"type":13,"value":[1]},"lineColor":{"type":16,"value":[0,0,0,1],"editor":{"type":"color"}}}}]}]]],0,0,[],[],[]]